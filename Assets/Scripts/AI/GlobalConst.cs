// --------------------------------------------------------------------------------------------------------------------
// <copyright file=GlobalConst.cs company=League of HTC Vive Dev>
/*
11111111111111111111111111111111111111001111111111111111111111111
11111111111111111111111111111111111100011111111111111111111111111
11111111111111111111111111111111100001111111111111111111111111111
11111111111111111111111111111110000111111111111111111111111111111
11111111111111111111111111111000000111111111111111111111111111111
11111111111111111111111111100000011110001100000000000000011111111
11111111111111111100000000000000000000000000000000011111111111111
11111111111111110111000000000000000000000000000011111111111111111
11111111111111111111111000000000000000000000000000000000111111111
11111111111111111110000000000000000000000000000000111111111111111
11111111111111111100011100000000000000000000000000000111111111111
11111111111111100000110000000000011000000000000000000011111111111
11111111111111000000000000000100111100000000000001100000111111111
11111111110000000000000000001110111110000000000000111000011111111
11111111000000000000000000011111111100000000000000011110001111111
11111110000000011111111111111111111100000000000000001111100111111
11111111000001111111111111111111110000000000000000001111111111111
11111111110111111111111111111100000000000000000000000111111111111
11111111111111110000000000000000000000000000000000000111111111111
11111111111111111100000000000000000000000000001100000111111111111
11111111111111000000000000000000000000000000111100000111111111111
11111111111000000000000000000000000000000001111110000111111111111
11111111100000000000000000000000000000001111111110000111111111111
11111110000000000000000000000000000000111111111110000111111111111
11111100000000000000000001110000001111111111111110001111111111111
11111000000000000000011111111111111111111111111110011111111111111
11110000000000000001111111111111111100111111111111111111111111111
11100000000000000011111111111111111111100001111111111111111111111
11100000000001000111111111111111111111111000001111111111111111111
11000000000001100111111111111111111111111110000000111111111111111
11000000000000111011111111111100011111000011100000001111111111111
11000000000000011111111111111111000111110000000000000011111111111
11000000000000000011111111111111000000000000000000000000111111111
11001000000000000000001111111110000000000000000000000000001111111
11100110000000000001111111110000000000000000111000000000000111111
11110110000000000000000000000000000000000111111111110000000011111
11111110000000000000000000000000000000001111111111111100000001111
11111110000010000000000000000001100000000111011111111110000001111
11111111000111110000000000000111110000000000111111111110110000111
11111110001111111100010000000001111100000111111111111111110000111
11111110001111111111111110000000111111100000000111111111111000111
11111111001111111111111111111000000111111111111111111111111100011
11111111101111111111111111111110000111111111111111111111111001111
11111111111111111111111111111110001111111111111111111111100111111
11111111111111111111111111111111001111111111111111111111001111111
11111111111111111111111111111111100111111111111111111111111111111
11111111111111111111111111111111110111111111111111111111111111111
*/
//   
// </copyright>
// <summary>
//  ChineseChessVR
// </summary>
// <author>胡良云（CloudHu）</author>
//中文注释：胡良云（CloudHu） 4/28/2017

// --------------------------------------------------------------------------------------------------------------------
using UnityEngine;
/// <summary>
/// FileName: GlobalConst.cs
/// Author: 胡良云（CloudHu）
/// Corporation: 
/// Description: 全局常量
/// DateTime: 4/28/2017
/// </summary>
public class GlobalConst : MonoBehaviour {

    #region Singleton //单例
    static GlobalConst _instance;

    static public GlobalConst Instance
    {
        get
        {
            if (_instance == null)
            {
                // 尝试寻找该类的实例。此处不能用GameObject.Find，因为MonoBehaviour继承自Component。
                _instance = Object.FindObjectOfType(typeof(GlobalConst)) as GlobalConst;

                if (_instance == null)	// 如果没有找到
                {
                    GameObject go = new GameObject("_GlobalConst");	// 创建一个新的GameObject
                    DontDestroyOnLoad(go);	// 防止被销毁
                    _instance = go.AddComponent<GlobalConst>();	// 将实例挂载到GameObject上
                }
            }
            return _instance;
        }
    }
    #endregion

    #region Public Variables  //公共变量区域
    public enum TYPE { KING, GUARD, ELEPHANT, HORSE, ROOK, CANNON, PAWN,NOCHESS };

    public TYPE[] chessmanType = { TYPE.ROOK, TYPE.HORSE, TYPE.ELEPHANT, TYPE.GUARD, TYPE.KING, TYPE.GUARD, TYPE.ELEPHANT, TYPE.HORSE, TYPE.ROOK,TYPE.CANNON,TYPE.CANNON,TYPE.PAWN,TYPE.PAWN,TYPE.PAWN,TYPE.PAWN,TYPE.PAWN,TYPE.ROOK, TYPE.HORSE, TYPE.ELEPHANT, TYPE.GUARD, TYPE.KING, TYPE.GUARD, TYPE.ELEPHANT, TYPE.HORSE, TYPE.ROOK,TYPE.CANNON,TYPE.CANNON,TYPE.PAWN,TYPE.PAWN,TYPE.PAWN,TYPE.PAWN,TYPE.PAWN,TYPE.NOCHESS
            };

    public struct _chessmanPosition
    {
        public byte x;
        public byte z;
    }

    public struct _chessMove
    {
        public short ChessId;
        public _chessmanPosition From;
        public _chessmanPosition To;
        public int Score;
    }

    public const int NOCHESS = 33;      //没有棋子
    public const int R_KING = 4;        //将
    public const int R_ROOK0 = 0;       //车
    public const int R_ROOK8 = 8;       //车
    public const int R_HORSE1 = 1;      //马
    public const int R_HORSE7 = 7;      //马
    public const int R_CANNON9 = 9;     //炮
    public const int R_CANNON10 = 10;   //炮
    public const int R_GUARD3 = 3;      //仕
    public const int R_GUARD5 = 5;
    public const int R_ELEPHANT2 = 2;   //象
    public const int R_ELEPHANT6 = 6;
    public const int R_PAWN11 = 11;     //兵
    public const int R_PAWN12 = 12;     //兵
    public const int R_PAWN13 = 13;     //兵
    public const int R_PAWN14 = 14;     //兵
    public const int R_PAWN15 = 15;     //兵
    public const int B_KING = 20;
    public const int B_ROOK16 = 16;
    public const int B_ROOK24 = 24;
    public const int B_HORSE17 = 17;
    public const int B_HORSE23 = 23;
    public const int B_CANNON25 = 25;
    public const int B_CANNON26 = 26;
    public const int B_GUARD19 = 19;
    public const int B_GUARD21 = 21;
    public const int B_ELEPHANT18 = 18;
    public const int B_ELEPHANT22 = 22;
    public const int B_PAWN27 = 27;
    public const int B_PAWN28 = 28;
    public const int B_PAWN29 = 29;
    public const int B_PAWN30 = 30;
    public const int B_PAWN31 = 31;

    public byte[,] ChessBoard = { {B_ROOK16,B_HORSE17,B_ELEPHANT18,B_GUARD19,B_KING,B_GUARD21,B_ELEPHANT22,B_HORSE23,B_ROOK24},
                                  {NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS},                                 
                                  {NOCHESS,B_CANNON25,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,B_CANNON26,NOCHESS},
                                  {B_PAWN27,NOCHESS,B_PAWN28,NOCHESS,B_PAWN29,NOCHESS,B_PAWN30,NOCHESS,B_PAWN31 },
                                  {NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS},
                                  {NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS},
                                  {R_PAWN11,NOCHESS,R_PAWN12,NOCHESS,R_PAWN13,NOCHESS,R_PAWN14,NOCHESS,R_PAWN15 },
                                  {NOCHESS,R_CANNON9,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,R_CANNON10,NOCHESS},
                                  {NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS},
                                  {R_ROOK0,R_HORSE1,R_ELEPHANT2,R_GUARD3,R_KING,R_GUARD5,R_ELEPHANT6,R_HORSE7,R_ROOK8},
    };
    //缓存的棋盘,用于重新初始化棋盘
    public byte[,] CacheChessBoard = { {B_ROOK16,B_HORSE17,B_ELEPHANT18,B_GUARD19,B_KING,B_GUARD21,B_ELEPHANT22,B_HORSE23,B_ROOK24},
                                  {NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS},
                                  {NOCHESS,B_CANNON25,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,B_CANNON26,NOCHESS},
                                  {B_PAWN27,NOCHESS,B_PAWN28,NOCHESS,B_PAWN29,NOCHESS,B_PAWN30,NOCHESS,B_PAWN31 },
                                  {NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS},
                                  {NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS},
                                  {R_PAWN11,NOCHESS,R_PAWN12,NOCHESS,R_PAWN13,NOCHESS,R_PAWN14,NOCHESS,R_PAWN15 },
                                  {NOCHESS,R_CANNON9,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,R_CANNON10,NOCHESS},
                                  {NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS,NOCHESS},
                                  {R_ROOK0,R_HORSE1,R_ELEPHANT2,R_GUARD3,R_KING,R_GUARD5,R_ELEPHANT6,R_HORSE7,R_ROOK8},
    };
    #endregion

    #region MonoBehaviour CallBacks //回调函数区域
    // 加载脚本实例时调用 Awake
    private void Awake()
    {
        _instance = this;
    }
    #endregion

    #region Public Methods	//公共方法区域

    public bool IsBlack(int x)
    {
        return x >= B_ROOK16 && x <= B_PAWN31;
    }

    public bool IsRed(int x)
    {
        return x >= R_ROOK0 && x <= R_PAWN15;
    }
     
    public bool IsSameSide(int x, int y)
    {
        if (y==NOCHESS || x==NOCHESS)
        {
            return false;
        }
        return IsBlack(x) == IsBlack(y);
    }

    /// <summary>
    /// 初始化棋盘
    /// </summary>
    public void InitChessBoard()
    {
        ChessBoard = CacheChessBoard;
    }
    #endregion

}
