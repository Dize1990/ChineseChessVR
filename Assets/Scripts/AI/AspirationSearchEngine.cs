// --------------------------------------------------------------------------------------------------------------------
// <copyright file=AspirationSearchEngine.cs company=League of HTC Vive Dev>
/*
11111111111111111111111111111111111111001111111111111111111111111
11111111111111111111111111111111111100011111111111111111111111111
11111111111111111111111111111111100001111111111111111111111111111
11111111111111111111111111111110000111111111111111111111111111111
11111111111111111111111111111000000111111111111111111111111111111
11111111111111111111111111100000011110001100000000000000011111111
11111111111111111100000000000000000000000000000000011111111111111
11111111111111110111000000000000000000000000000011111111111111111
11111111111111111111111000000000000000000000000000000000111111111
11111111111111111110000000000000000000000000000000111111111111111
11111111111111111100011100000000000000000000000000000111111111111
11111111111111100000110000000000011000000000000000000011111111111
11111111111111000000000000000100111100000000000001100000111111111
11111111110000000000000000001110111110000000000000111000011111111
11111111000000000000000000011111111100000000000000011110001111111
11111110000000011111111111111111111100000000000000001111100111111
11111111000001111111111111111111110000000000000000001111111111111
11111111110111111111111111111100000000000000000000000111111111111
11111111111111110000000000000000000000000000000000000111111111111
11111111111111111100000000000000000000000000001100000111111111111
11111111111111000000000000000000000000000000111100000111111111111
11111111111000000000000000000000000000000001111110000111111111111
11111111100000000000000000000000000000001111111110000111111111111
11111110000000000000000000000000000000111111111110000111111111111
11111100000000000000000001110000001111111111111110001111111111111
11111000000000000000011111111111111111111111111110011111111111111
11110000000000000001111111111111111100111111111111111111111111111
11100000000000000011111111111111111111100001111111111111111111111
11100000000001000111111111111111111111111000001111111111111111111
11000000000001100111111111111111111111111110000000111111111111111
11000000000000111011111111111100011111000011100000001111111111111
11000000000000011111111111111111000111110000000000000011111111111
11000000000000000011111111111111000000000000000000000000111111111
11001000000000000000001111111110000000000000000000000000001111111
11100110000000000001111111110000000000000000111000000000000111111
11110110000000000000000000000000000000000111111111110000000011111
11111110000000000000000000000000000000001111111111111100000001111
11111110000010000000000000000001100000000111011111111110000001111
11111111000111110000000000000111110000000000111111111110110000111
11111110001111111100010000000001111100000111111111111111110000111
11111110001111111111111110000000111111100000000111111111111000111
11111111001111111111111111111000000111111111111111111111111100011
11111111101111111111111111111110000111111111111111111111111001111
11111111111111111111111111111110001111111111111111111111100111111
11111111111111111111111111111111001111111111111111111111001111111
11111111111111111111111111111111100111111111111111111111111111111
11111111111111111111111111111111110111111111111111111111111111111
*/
//   
// </copyright>
// <summary>
//  ChineseChessVR
// </summary>
// <author>胡良云（CloudHu）</author>
//中文注释：胡良云（CloudHu） 5/2/2017

// --------------------------------------------------------------------------------------------------------------------
/// <summary>
/// FileName: AspirationSearchEngine.cs
/// Author: 胡良云（CloudHu）
/// Corporation: 
/// Description: 渴望搜索
/// DateTime: 5/2/2017
/// </summary>
public class AspirationSearchEngine : AlphaBeta {

    #region Public Variables  //公共变量区域


    #endregion


    #region Private Variables   //私有变量区域


    #endregion


    #region MonoBehaviour CallBacks //回调函数区域
    #endregion

    #region Public Methods	//公共方法区域

    public override void SearchAGoodMove(byte[,] chessPosition)
    {
        CurPosition = chessPosition;    //把当前局面赋值给CurPosition
        //先进行浅层搜索,猜测目标值范围
        m_nMaxDepth = m_nSearchDepth - 1;
        int x = alphabetaSearch_Even(m_nMaxDepth, -20000, 20000);
        //对目标值附近的小窗口进行搜索
        m_nMaxDepth = m_nSearchDepth;
        int y = alphabetaSearch_Even(m_nMaxDepth, x - 50, x + 50);
        if (y<(x-50))   //fail-low  re-search 低于渴望值,重新搜索
        {
            alphabetaSearch_Even(m_nMaxDepth, -20000, y);
        }

        if (y < (x + 50))   //fail-high  re-search 高于渴望值,重新搜索
        {
            alphabetaSearch_Even(m_nMaxDepth, y, 20000);
        }
        //将棋盘修改为走过的
        int killId = CurPosition[m_cmBestMove.To.z, m_cmBestMove.To.x];//取目标位置的棋子
        NetworkTurn.Instance.MovingChessman(m_cmBestMove.ChessId, killId, m_cmBestMove.To.z, m_cmBestMove.To.x);
    }

    #endregion

}
