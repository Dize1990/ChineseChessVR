// --------------------------------------------------------------------------------------------------------------------
// <copyright file=NegaMaxEngin.cs company=League of HTC Vive Dev>
/*
11111111111111111111111111111111111111001111111111111111111111111
11111111111111111111111111111111111100011111111111111111111111111
11111111111111111111111111111111100001111111111111111111111111111
11111111111111111111111111111110000111111111111111111111111111111
11111111111111111111111111111000000111111111111111111111111111111
11111111111111111111111111100000011110001100000000000000011111111
11111111111111111100000000000000000000000000000000011111111111111
11111111111111110111000000000000000000000000000011111111111111111
11111111111111111111111000000000000000000000000000000000111111111
11111111111111111110000000000000000000000000000000111111111111111
11111111111111111100011100000000000000000000000000000111111111111
11111111111111100000110000000000011000000000000000000011111111111
11111111111111000000000000000100111100000000000001100000111111111
11111111110000000000000000001110111110000000000000111000011111111
11111111000000000000000000011111111100000000000000011110001111111
11111110000000011111111111111111111100000000000000001111100111111
11111111000001111111111111111111110000000000000000001111111111111
11111111110111111111111111111100000000000000000000000111111111111
11111111111111110000000000000000000000000000000000000111111111111
11111111111111111100000000000000000000000000001100000111111111111
11111111111111000000000000000000000000000000111100000111111111111
11111111111000000000000000000000000000000001111110000111111111111
11111111100000000000000000000000000000001111111110000111111111111
11111110000000000000000000000000000000111111111110000111111111111
11111100000000000000000001110000001111111111111110001111111111111
11111000000000000000011111111111111111111111111110011111111111111
11110000000000000001111111111111111100111111111111111111111111111
11100000000000000011111111111111111111100001111111111111111111111
11100000000001000111111111111111111111111000001111111111111111111
11000000000001100111111111111111111111111110000000111111111111111
11000000000000111011111111111100011111000011100000001111111111111
11000000000000011111111111111111000111110000000000000011111111111
11000000000000000011111111111111000000000000000000000000111111111
11001000000000000000001111111110000000000000000000000000001111111
11100110000000000001111111110000000000000000111000000000000111111
11110110000000000000000000000000000000000111111111110000000011111
11111110000000000000000000000000000000001111111111111100000001111
11111110000010000000000000000001100000000111011111111110000001111
11111111000111110000000000000111110000000000111111111110110000111
11111110001111111100010000000001111100000111111111111111110000111
11111110001111111111111110000000111111100000000111111111111000111
11111111001111111111111111111000000111111111111111111111111100011
11111111101111111111111111111110000111111111111111111111111001111
11111111111111111111111111111110001111111111111111111111100111111
11111111111111111111111111111111001111111111111111111111001111111
11111111111111111111111111111111100111111111111111111111111111111
11111111111111111111111111111111110111111111111111111111111111111
*/
//   
// </copyright>
// <summary>
//  ChineseChessVR
// </summary>
// <author>胡良云（CloudHu）</author>
//中文注释：胡良云（CloudHu） 4/28/2017

// --------------------------------------------------------------------------------------------------------------------
using System;
/// <summary>
/// FileName: NegaMaxEngin.cs
/// Author: 胡良云（CloudHu）
/// Corporation: 
/// Description: 负极大值算法的搜索核心类
/// DateTime: 4/28/2017
/// </summary>
public class NegaMaxEngin : SearchEngine {
	
	#region Public Variables  //公共变量区域
	
	
	#endregion


	#region Private Variables   //私有变量区域
	

	#endregion
	
	
	#region MonoBehaviour CallBacks //回调函数区域
	// Use this for initialization
	void Start () {
		
	}
	
	// Update is called once per frame
	void Update () {
		
	}
    #endregion

    #region Public Methods	//公共方法区域
    /// <summary>
    /// 为当前棋局寻找好的走步,并修改棋盘数据为走过的状态
    /// </summary>
    /// <param name="chessPosition">棋局</param>
    public override void SearchAGoodMove(byte[,] chessPosition)
    {
        //设定搜索层数为m_nSearchDepth
        m_nMaxDepth = m_nSearchDepth;
        //将传入的棋盘复制到成员变量中
        CurPosition = chessPosition;//Array.Copy(chessPosition, CurPosition,  90);
        //调用负极大值搜索函数找到最佳走法
        NegaMax(m_nMaxDepth);
        //将棋盘修改为走过的
        int killId = CurPosition[m_cmBestMove.To.z, m_cmBestMove.To.x];//取目标位置的棋子
        NetworkTurn.Instance.MovingChessman(m_cmBestMove.ChessId, killId, m_cmBestMove.To.z, m_cmBestMove.To.x);
    }
    #endregion

    #region Protected Methods	//受保护方法区域
    /// <summary>
    /// 负极大值搜索算法
    /// </summary>
    /// <param name="depth">深度</param>
    /// <returns></returns>
    protected int NegaMax(int depth)
    {
        int scoreNegaMax, possibleMoveCount, currentNegaMax = -20000, max = IsGameOver(CurPosition, depth);
        byte chessType; //棋子类型
        if (max!=0) //检查棋局是否结束
        {
            return max;   //棋局结束返回极大/极小值
        }
        if (depth<=0)   //叶子节点取估值
        {
            return m_pEval.Evaluate(CurPosition, (m_nMaxDepth - depth) % 2);    //返回估值
        }
        //列举出当前局面下一步所有可能的走法
        possibleMoveCount = ChessMoveGenerator.CreatePossibleMove(CurPosition, depth, (m_nMaxDepth - depth) % 2);
        for (max = 0; max < possibleMoveCount; max++)
        {
            //根据走法产生新局面
            chessType = MakeMove(ChessMoveGenerator.m_MoveList[depth, max]);
            //递归调用负极大搜索下一层的节点
            scoreNegaMax = -NegaMax(depth - 1);
            //恢复当期局面
            UnMakeMove(ChessMoveGenerator.m_MoveList[depth, max], chessType);
            if (scoreNegaMax>currentNegaMax)  //如果score大于已知的最大值
            {
                currentNegaMax = scoreNegaMax; //修改当期最大值为scoreNegaMax
                if (depth==m_nMaxDepth) //在根部保存最佳方法
                {
                    m_cmBestMove= ChessMoveGenerator.m_MoveList[depth, max];
                }
            }
        }
        return currentNegaMax;
    }
    #endregion
}
